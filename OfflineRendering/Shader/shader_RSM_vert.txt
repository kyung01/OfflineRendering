#version 150
uniform mat4 mat_proj , mat_viewModel, mat_view_inverted;
uniform vec3 world_size;
uniform vec3 light_pos, light_dir;
uniform vec4 light_color, material_color;

in vec3 pos;
in vec3 normal;

out vec3 f_pos_world;
out vec3 f_normal;

vec3 get_normal( mat4 mat_model, vec3 normal){
	vec3 normal_translated = 
	(mat_model* vec4(normal,1) - mat_model* vec4(0,0,0,1)).xyz;
	return normal_translated;
}
vec3 getWorldPosition(mat4 mat_model, vec3 world_size, vec4 vert ){
	return (mat_model * vert ).xyz ;
}

void main(){
	mat4 mat_model = mat_view_inverted * mat_viewModel;

	gl_Position = mat_proj * mat_viewModel * vec4(pos,1);
	f_pos_world = (mat_model * vec4(pos,1)) .xyz;
	f_normal = get_normal(mat_model, normal);
}